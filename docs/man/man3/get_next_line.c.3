.TH "lib/my/src/str/get_next_line.c" 3 "Wed Jan 7 2015" "Version 1.0" "myhs" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/my/src/str/get_next_line.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <unistd\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include 'my\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBwhere_my_buff_end\fP (char *statbuffer, char *stockstat, int j)"
.br
.ti -1c
.RI "void \fBmy_gstrcpy\fP (char *buffer, char *stockstat, \fBt_getline\fP *s, char *dest)"
.br
.ti -1c
.RI "char * \fBstat_in_buff\fP (char *statbuffer, char *buffer, \fBt_getline\fP *s, char *dest)"
.br
.ti -1c
.RI "char * \fBget_next_line\fP (const int fd)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "char* get_next_line (const intfd)"

.PP
Definition at line 81 of file get_next_line\&.c\&.
.PP
References s_getline::buffer, s_getline::dest, s_getline::i, s_getline::ret, SIZE_OF_READ, stat_in_buff(), and s_getline::stop\&.
.PP
Referenced by minishell1()\&.
.PP
.nf
82 {
83   static char   statbuffer[SIZE_OF_READ + 1];
84   t_getline     s;
85 
86   s\&.i = 1;
87   s\&.stop = 0;
88   while (s\&.stop == 0)
89     {
90       if ((s\&.buffer = malloc(SIZE_OF_READ * s\&.i + SIZE_OF_READ)) == NULL)
91     return (NULL);
92       if ((s\&.ret = read(fd, statbuffer, SIZE_OF_READ)) == - 1)
93     return (NULL);
94       statbuffer[s\&.ret] = '\0';
95       s\&.buffer = stat_in_buff(statbuffer, s\&.buffer, &s, s\&.dest);
96       if (s\&.i != 1)
97     free(s\&.dest);
98       if (s\&.ret == 0)
99     {
100       close(fd);
101       return (s\&.buffer);
102     }
103       s\&.dest = s\&.buffer;
104       s\&.i++;
105     }
106   return (s\&.buffer);
107 }
.fi
.SS "void my_gstrcpy (char *buffer, char *stockstat, \fBt_getline\fP *s, char *dest)"

.PP
Definition at line 29 of file get_next_line\&.c\&.
.PP
References s_getline::i, s_getline::s, and SIZE_OF_READ\&.
.PP
Referenced by stat_in_buff()\&.
.PP
.nf
30 {
31   int       i;
32 
33   i = 0;
34   while (stockstat[s->s])
35     {
36       buffer[s->s] = stockstat[i];
37       s->s++;
38       i++;
39     }
40   i = 0;
41   while (i != SIZE_OF_READ)
42     {
43       stockstat[i] = '\0';
44       i++;
45     }
46   i = 0;
47   while (i != (s->i - 1) * SIZE_OF_READ)
48     {
49       buffer[s->s] = dest[i];
50       i++;
51       s->s++;
52     }
53 }
.fi
.SS "char* stat_in_buff (char *statbuffer, char *buffer, \fBt_getline\fP *s, char *dest)"

.PP
Definition at line 55 of file get_next_line\&.c\&.
.PP
References my_gstrcpy(), s_getline::s, SIZE_OF_READ, s_getline::stop, and where_my_buff_end()\&.
.PP
Referenced by get_next_line()\&.
.PP
.nf
57 {
58   int       j;
59   static char   stockstat[SIZE_OF_READ + 1];
60 
61   j = 0;
62   s->s = 0;
63   my_gstrcpy(buffer, stockstat, s, dest);
64   while (j != SIZE_OF_READ && s->stop !=  1)
65     {
66       buffer[s->s] = statbuffer[j];
67       if (buffer[s->s] == '\n')
68     {
69       s->stop = 1;
70       where_my_buff_end(statbuffer, stockstat, j);
71       buffer[s->s] = '\0';
72     }
73       else
74     buffer[s->s + 1] = '\0';
75       s->s++;
76       j++;
77     }
78   return (buffer);
79 }
.fi
.SS "void where_my_buff_end (char *statbuffer, char *stockstat, intj)"

.PP
Definition at line 15 of file get_next_line\&.c\&.
.PP
Referenced by stat_in_buff()\&.
.PP
.nf
16 {
17   int       i;
18 
19   i = 0;
20   while (statbuffer[j + 1])
21     {
22       stockstat[i] = statbuffer[j + 1];
23       i++;
24       j++;
25     }
26   stockstat[i] = '\0';
27 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for myhs from the source code\&.

.TH "lib/my/src/printf/case_printf_part3.c" 3 "Wed Jan 7 2015" "Version 1.0" "myhs" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/my/src/printf/case_printf_part3.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'my\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBcase_pres\fP (void *argv, \fBt_index\fP *s, const char *format, const \fBt_struc\fP *tab)"
.br
.ti -1c
.RI "int \fBcase_sharp2\fP (\fBt_index\fP *s, const char *format, int i, const \fBt_struc\fP *tab)"
.br
.ti -1c
.RI "int \fBcase_sharp\fP (void *argv, \fBt_index\fP *s, const char *format, const \fBt_struc\fP *tab)"
.br
.ti -1c
.RI "int \fBcase_zero\fP (void *argv, \fBt_index\fP *s, const char *format, const \fBt_struc\fP *tab)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "int case_pres (void *argv, \fBt_index\fP *s, const char *format, const \fBt_struc\fP *tab)"

.PP
Definition at line 13 of file case_printf_part3\&.c\&.
.PP
References my_putchar()\&.
.PP
Referenced by my_printf()\&.
.PP
.nf
15 {
16   (void)*s;
17   (void)*tab;
18   (void)argv;
19   (void)*format;
20   my_putchar('%');
21   return (1);
22 }
.fi
.SS "int case_sharp (void *argv, \fBt_index\fP *s, const char *format, const \fBt_struc\fP *tab)"

.PP
Definition at line 42 of file case_printf_part3\&.c\&.
.PP
References case_sharp2(), s_index::i, s_index::n, and s_struc::ptr_tab\&.
.PP
Referenced by my_printf()\&.
.PP
.nf
44 {
45   int       i;
46   int       ret;
47 
48   i = 0;
49   ret = 0;
50   if (format[s->i + 1] == 'x' || format[s->i + 1] == 'X'
51       || format[s->i + 1] == 'o')
52     {
53       s->n = 0;
54       i = case_sharp2(s, format, i, tab);
55       ret = i;
56       i = (*tab[s->n]\&.ptr_tab)(argv, s, format, tab);
57       i = i + ret;
58       s->i++;
59     }
60   return (i);
61 }
.fi
.SS "int case_sharp2 (\fBt_index\fP *s, const char *format, inti, const \fBt_struc\fP *tab)"

.PP
Definition at line 24 of file case_printf_part3\&.c\&.
.PP
References s_struc::c, s_index::i, my_putchar(), my_putstr(), and s_index::n\&.
.PP
Referenced by case_sharp()\&.
.PP
.nf
26 {
27   if (format[s->i + 1] == 'x' || format[s->i + 1] == 'X')
28     {
29       my_putstr("0x");
30       i = i + 2;
31     }
32   else if (format[s->i + 1] == 'o')
33     {
34       my_putchar('0');
35       i = i + 1;
36     }
37   while (tab[s->n]\&.c != format[s->i + 1])
38     s->n++;
39   return (i);
40 }
.fi
.SS "int case_zero (void *argv, \fBt_index\fP *s, const char *format, const \fBt_struc\fP *tab)"

.PP
Definition at line 63 of file case_printf_part3\&.c\&.
.PP
References s_struc::c, s_index::i, s_index::n, s_index::nbr, s_index::p, and s_struc::ptr_tab\&.
.PP
Referenced by my_printf()\&.
.PP
.nf
65 {
66   int       i;
67 
68   s->nbr = 0;
69   i = 0;
70   while (format[s->i + 1] >= '0' && format[s->i + 1] <= '9')
71     {
72       s->nbr = s->nbr * 10 + format[s->i + 1] - '0';
73       s->i++;
74     }
75   if (format[s->i + 1] == 'x' || format[s->i + 1] == 'X'
76       || format[s->i + 1] == 'o' || format[s->i + 1] == 'u'
77       || format[s->i + 1] == 'd' || format[s->i + 1] == 'i')
78     {
79       s->p = 1;
80       s->n = 0;
81       while (tab[s->n]\&.c != format[s->i + 1])
82     s->n++;
83       i = (*tab[s->n]\&.ptr_tab)(argv, s, format, tab);
84       s->i++;
85     }
86   return (i);
87 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for myhs from the source code\&.
